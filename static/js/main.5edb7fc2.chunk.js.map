{"version":3,"sources":["components/About.js","components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","_useState","useState","color","backgroundColor","_useState2","_slicedToArray","myStyle","setMyStyle","_useState3","_useState4","btnText","setBtnText","React","createElement","Fragment","className","style","id","type","data-bs-toggle","data-bs-target","aria-expanded","aria-controls","data-bs-parent","onClick","border","Navbar","props","concat","mode","Link","to","title","aria-label","aria-current","aboutText","toggleMode","htmlFor","TextForm","Text","setText","heading","value","onChange","event","target","rows","newText","toUpperCase","showAlert","toLowerCase","text","document","getElementById","select","navigator","clipboard","writeText","split","join","replace","length","defaultProps","capitalize","word","lower","charAt","slice","Alert","alert","role","msg","App","setMode","setAlert","message","setTimeout","Router","body","Routes","Route","exact","path","element","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.5edb7fc2.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\n\r\nexport default function About() {\r\n\r\n    const [myStyle, setMyStyle] = useState\r\n    ({\r\n        color: 'black',\r\n        backgroundColor: 'white',\r\n    })\r\n\r\n    const [btnText, setBtnText] = useState('Enable Dark Mode')\r\n\r\n    const toggleStyle = ()=>{\r\n        if (myStyle.color === 'black') {\r\n            setMyStyle({\r\n                color: 'white',\r\n                backgroundColor: '#042743',\r\n                border: '1px solid white'\r\n            })\r\n            setBtnText(\"Enable light Mode\")\r\n        }\r\n        else{\r\n            setMyStyle({\r\n                color: 'black',\r\n                backgroundColor: 'white',\r\n            })\r\n            setBtnText(\"Enable dark Mode\")\r\n        }\r\n    }\r\n\r\n  return (\r\n    <>\r\n    <div className='container my-4' style={myStyle}>\r\n        <h1 className='my-3'>About us</h1>\r\n        <div className=\"accordion\" id=\"accordionExample\" style={myStyle}>\r\n            <div className=\"accordion-item\">\r\n                <h2 className=\"accordion-header\">\r\n                    <button className=\"accordion-button\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">Accordion Item #1</button>\r\n                </h2>\r\n                <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\">\r\n                        <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"accordion-item\">\r\n                <h2 className=\"accordion-header\">\r\n                    <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                        Accordion Item #2\r\n                    </button>\r\n                </h2>\r\n                <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\">\r\n                        <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"accordion-item\">\r\n                <h2 className=\"accordion-header\">\r\n                    <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                        Accordion Item #3\r\n                    </button>\r\n                </h2>\r\n                <div id=\"collapseThree\" className=\"accordion-collapse collapse\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\">\r\n                        <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div className=\"container my-3\">\r\n            <button onClick={toggleStyle} type=\"button\" className=\"btn btn-primary my-2\">{btnText}</button>\r\n        </div>\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n      <nav\r\n        className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n      >\r\n        <div className=\"container-fluid\">\r\n          <Link className=\"navbar-brand\" to=\"/\">\r\n            {props.title}\r\n          </Link>\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#navbarSupportedContent\"\r\n            aria-controls=\"navbarSupportedContent\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link active \" aria-current=\"page\" to=\"/\">\r\n                  Home\r\n                </Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/About\">\r\n                  {props.aboutText}\r\n                </Link>\r\n              </li>\r\n            </ul>\r\n            <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n              <input\r\n                className=\"form-check-input\" onClick={props.toggleMode}\r\n                type=\"checkbox\"\r\n                // role=\"switch\"\r\n                id=\"flexSwitchCheckDefault\"\r\n              />\r\n              <label className=\"form-check-label\"  htmlFor=\"flexSwitchCheckDefault\" >\r\n                Enable Dark Mode\r\n              </label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title:\r\n    PropTypes.string.isRequired, /* if is required is implemented -> have to give command default or without default */\r\n  aboutText: PropTypes.string.isRequired\r\n}\r\n\r\nNavbar.defaultProps = {\r\n  title: \"Set title here\",\r\n  aboutText: \"About \"\r\n};\r\n","import React, {useState} from 'react'\r\n\r\n\r\n\r\nexport default function TextForm(props) {\r\n\r\n    const handleUpClick = () => {\r\n        // console.log(\"Uppercase was clicked\" + Text);\r\n        let newText = Text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to upperCase !\", \"success\")\r\n    }\r\n\r\n    const handleLoClick = () => {\r\n        // console.log(\"Uppercase was clicked\" + Text);\r\n        let newText = Text.toLowerCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to lowerCase !\", \"success\")\r\n\r\n    }\r\n\r\n    const handleClearClick = () => {\r\n        // console.log(\"Uppercase was clicked\" + Text);\r\n        let newText = \"\";\r\n        setText(newText)\r\n        props.showAlert(\"Text cleared !\", \"success\")\r\n\r\n    }\r\n    const handleOnChange = (event) => {\r\n        // console.log(\"on change\");\r\n        setText(event.target.value)\r\n    }\r\n\r\n    const handleCopy = ()=> {\r\n        let text = document.getElementById(\"myBox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"Copied to Clipboard !\", \"success\")\r\n\r\n    }\r\n\r\n    const handleExtraSpaces = () => {\r\n        let newText = Text.split(/[ ]+/);\r\n        setText(newText.join(\" \"))\r\n        props.showAlert(\"Extra Spaces Removed  !\", \"success\")\r\n\r\n    }\r\n\r\n    const handleAddSpace = () => {\r\n        // let newText = Text.split(/[ ]+/);\r\n        setText(Text.replace(/\\s+/g, \"  \"))\r\n        props.showAlert(\"Added Double Spaces !\", \"success\")\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    // imported from reaact hook\r\n    // text is variable & update function -> setText\r\n    const [Text, setText] = useState('');\r\n\r\n    // Text = \"new text\";   // //wrong way to change the state\r\n    // setText(\"new text\");    // // correct way to change the state\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color: props.mode ==='dark'?'white' : '#042743' }}>\r\n            <h1>{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n                {/* <label htmlFor=\"myBox\" className=\"form-label\">Enter your text</label> */}\r\n                <textarea className=\"form-control\" value={Text} onChange={handleOnChange} style={{backgroundColor: props.mode==='dark' ? 'grey' : 'white', color: props.mode ==='dark'?'white' : '#042743'}} id=\"myBox\" rows=\"8\"></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleLoClick}>Convert to Lowercase</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleClearClick}>Clear Text</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleCopy}>Copy Text</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleAddSpace}>Add Extra Spaces</button>\r\n\r\n        </div>\r\n\r\n        <div className=\"container my-2\" style={{color: props.mode ==='dark'?'white' : '#042743' }}>\r\n\r\n            <h2>Your text summary</h2>\r\n\r\n            <p>{Text.split(\" \").length} words and {Text.length} characters</p>\r\n\r\n            <p>{0.00167 * Text.length} Minutes read</p>\r\n            <h3>Preview</h3>\r\n\r\n            <p>{Text.length > 0? Text: \"Enter something in the textbox above to preview it here\"}</p>\r\n        </div>\r\n        </>\r\n    \r\n  )\r\n}\r\n","import React from \"react\";\r\n\r\nconst capitalize = (word) => {\r\n  const lower = word.toLowerCase();\r\n  return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n}\r\n\r\nfunction Alert(props) {\r\n  return (\r\n      props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{capitalize(props.alert.type)}</strong> : {props.alert.msg}\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default Alert;\r\n","// // import logo from './logo.svg';\n// import React, { useState } from \"react\";\n// import \"./App.css\";\n// import About from \"./components/About\";\n// import Navbar from \"./components/Navbar\";\n// import TextForm from \"./components/TextForm\";\n// import Alert from \"./components/Alert\";\n\n// import { BrowserRouter as Router, Routes, Route, Link } from \"react-router-dom\";\n\n// function App() {\n//   const [mode, setMode] = useState(\"light\"); // weather dark mode is enabled or not\n\n//   const [alert, setAlert] = useState(null);\n\n//   const showAlert = (message, type)=> {\n//     setAlert({\n//       msg: message,\n//       type: type,\n//     });\n//     setTimeout(() => {\n//       setAlert(null);\n//     }, 1500);\n//   };\n\n//   const toggleMode = () => {\n//     if (mode === \"light\") {\n//       setMode(\"dark\");\n//       document.body.style.backgroundColor = \"#042743\";\n//       showAlert(\"Dark mode has been enabled\", \"success\");\n//       document.title = \"TextUtils - Dark Mode\";\n\n//       // To set the timer in the title to show the text in the browser\n\n//       // it updateds the title which shows in the browser\n//       // setInterval(() => {\n//       //   document.title = 'TextUtils is Amazing Today';\n//       // }, 2000);\n//       // setInterval(() => {\n//       //   document.title = 'Installed TextUtils now';\n//       // }, 1000);\n//     } else {\n//       setMode(\"light\");\n//       document.body.style.backgroundColor = \"white\";\n//       showAlert(\"Light mode has been enabled\", \"success\");\n//       document.title = \"TextUtils - Light Mode\";\n//     }\n//   };\n\n//   return (\n//     <>\n//     {/* <Navbar></Navbar>        {/*It imports Navbar automatically*/}\n//     {/* <Navbar title = \"TextUtils\" aboutText=\"About TextUtils\"></Navbar>       {/* initialise props */}\n//     <Router>\n//     <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n//         {/* initialise props */}\n//     <Alert alert={alert}/>\n//     <div className=\"container my-3\">\n//     <Routes>\n//           <Route path=\"/about\">\n//             <About />\n//           </Route>\n//           <Route path=\"/\">\n//             <TextForm showAlert={showAlert} heading=\"Enter the text to modify here\" mode={mode}/>\n//           </Route>\n//     </Routes>\n//     </div>\n//     </Router>\n//     </>\n//   );\n// }\n\n// export default App;\n\n\nimport React, { useState } from \"react\";\nimport \"./App.css\";\nimport About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport Alert from \"./components/Alert\";\n\nimport { BrowserRouter as Router, Routes, Route, Link } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\"); // whether dark mode is enabled or not\n\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  };\n\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"#042743\";\n      showAlert(\"Dark mode has been enabled\", \"success\");\n      document.title = \"TextUtils - Dark Mode\";\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mode has been enabled\", \"success\");\n      document.title = \"TextUtils - Light Mode\";\n    }\n  };\n\n  return (\n    <>\n    {/* <Navbar title=\"TextUtils\" mode = {mode} toggleMode={toggleMode} /> */}\n    {/* <Navbar/> */}\n      <Router>\n        <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n        <Alert alert={alert} />\n        <div className=\"container my-3\">\n          <Routes>\n            <Route exact path=\"/about\" element={<About />} />\n            <Route path=\"/\" element={<TextForm showAlert={showAlert} heading=\"Enter the text to modify here\" mode={mode} />} />\n          </Routes>\n        </div>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}